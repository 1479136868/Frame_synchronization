// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCient.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace MyGame {

  #region Messages
  /// <summary>
  /////客户端----》服务器  
  /// </summary>
  public sealed class C2S_OperationMsg : pb::IMessage {
    private static readonly pb::MessageParser<C2S_OperationMsg> _parser = new pb::MessageParser<C2S_OperationMsg>(() => new C2S_OperationMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_OperationMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private int userid_;
    /// <summary>
    ///发送者的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "Left" field.</summary>
    public const int LeftFieldNumber = 2;
    private int left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private int right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 4;
    private int up_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    /// <summary>Field number for the "down" field.</summary>
    public const int DownFieldNumber = 5;
    private int down_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Down {
      get { return down_; }
      set {
        down_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Userid);
      }
      if (Left != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Left);
      }
      if (Right != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Right);
      }
      if (Up != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Up);
      }
      if (Down != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Down);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Right);
      }
      if (Up != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Up);
      }
      if (Down != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Down);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Userid = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadInt32();
            break;
          }
          case 24: {
            Right = input.ReadInt32();
            break;
          }
          case 32: {
            Up = input.ReadInt32();
            break;
          }
          case 40: {
            Down = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////服务器转发的客户端的操作，逻辑帧  服务器每50ms发一次。
  /// </summary>
  public sealed class S2C_FameMsg : pb::IMessage {
    private static readonly pb::MessageParser<S2C_FameMsg> _parser = new pb::MessageParser<S2C_FameMsg>(() => new S2C_FameMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FameMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameID" field.</summary>
    public const int FrameIDFieldNumber = 1;
    private int frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "operationList" field.</summary>
    public const int OperationListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MyGame.C2S_OperationMsg> _repeated_operationList_codec
        = pb::FieldCodec.ForMessage(18, global::MyGame.C2S_OperationMsg.Parser);
    private readonly pbc::RepeatedField<global::MyGame.C2S_OperationMsg> operationList_ = new pbc::RepeatedField<global::MyGame.C2S_OperationMsg>();
    /// <summary>
    ////客户端的操作的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MyGame.C2S_OperationMsg> OperationList {
      get { return operationList_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 3;
    private int randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameID);
      }
      operationList_.WriteTo(output, _repeated_operationList_codec);
      if (RandomSeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RandomSeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameID);
      }
      size += operationList_.CalculateSize(_repeated_operationList_codec);
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameID = input.ReadInt32();
            break;
          }
          case 18: {
            operationList_.AddEntriesFrom(input, _repeated_operationList_codec);
            break;
          }
          case 24: {
            RandomSeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////当客户端连接到服务器的时候，服务器向客户端发一下客户端的Id
  /// </summary>
  public sealed class S2C_ConnectResponseMsg : pb::IMessage {
    private static readonly pb::MessageParser<S2C_ConnectResponseMsg> _parser = new pb::MessageParser<S2C_ConnectResponseMsg>(() => new S2C_ConnectResponseMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ConnectResponseMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private int userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
